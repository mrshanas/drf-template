version: "3.9"

services:
  api:
    container_name: backend_api
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    env_file:
      - ./.envs/.production/.database
      - ./.envs/.production/.django
    restart: always
    depends_on:
      - db

  db:
    image: postgres:13-alpine
    volumes:
      - prod-db-data:/var/lib/postgresql/data
    env_file:
      - ./.envs/.production/.database

volumes:
  prod-db-data:
# version: "3.9"

# services:
#   api:
#     container_name: backend_api
#     build:
#       context: .
#     ports:
#       - "8000:8000"
#     command: sh -c "python manage.py collectstatic --noinput && python manage.py makemigrations && python manage.py migrate && gunicorn core.wsgi:application --bind 0.0.0.0:8000"
#     volumes:
#       - .:/app
#       - static_volume:/app/static
#     env_file:
#       - ./.envs/.production/.django
#       - ./.envs/.production/.database
#     depends_on:
#       - db
#     restart: always

#   db:
#     image: postgres:13-alpine
#     volumes:
# - dev-db-data:/var/lib/postgresql/data
#     env_file:
#       - ./.envs/.production/.database

#   proxy:
#     container_name: "proxy_server"
#     build:
#       context: ./proxy
#     ports:
#       - 80:80
#       - 443:443
#     volumes:
#       - ./proxy:/proxy
#       - /etc/letsencrypt:/etc/letsencrypt:ro
#       - /tmp/acme-challenge:/tmp/acme-challenge
#       - static_volume:/app/static
#     restart: always
#     networks:
#       - app
# volumes:
#   dev-db-data:
#   static_volume:
# networks:
#   app:
#     driver: bridge
